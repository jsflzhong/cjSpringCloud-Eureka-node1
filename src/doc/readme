@author cj
@date 2018-03-21

1.这是spring-boot1.5.10版本,从官方http://start.spring.io/获得.
    注意,截止到目前20180321日,不要下载官方的最新版spring-boot2.0.0,
    因为里面的部分依赖,例如spring-test-5.0,无论在默认的国外镜像仓库还是国内的阿里仓库,都无法下载依赖.

2.环境.
    ENV: jdk1.8.0_121
    IDE: intelliJ idea
    MAVEN: 3.3.9

3.对下载的项目做的基础更改记录.

    1>.pom.xml中添加支持web的模块：
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        该依赖已下载.

    2>.根据spring-boot官方建议,在根目录下创建了以下四个目录:
        1).domain目录主要用于实体（Entity）与数据访问层（Repository）
        2).service 层主要是业务类代码
        3).controller 负责页面访问控制
        采用默认配置可以省去很多配置，当然也可以根据自己的喜欢来进行更改.

    3>.测试类:
        com/michael/springBoot/controller/HelloWorldController.java

    4>.热启动pom:
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-devtools</artifactId>
                <optional>true</optional>
           </dependency>
        </dependencies>
        <build>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <configuration>
                        <fork>true</fork>
                    </configuration>
                </plugin>
           </plugins>
        </build>
        该依赖已下载.
        使用方式:
            1>.如果用的启动方式是:"Application"类的main方法,则在修改后的类中,按ctrl_shift_f9.
            2>.如果用的启动方式是:"spring-boot:run",则在修改后的类中,按ctrl_f9.

        注意,经测,该热启动功能连热修改了handler的url, 或构造函数, 或注解等,都能起作用.

        自动重启的原理在于spring boot使用两个classloader：不改变的类（如第三方jar）由base类加载器加载，正在开发的类由restart类加载器加载。
        应用重启时，restart类加载器被扔掉重建，而base类加载器不变，这种方法意味着应用程序重新启动通常比“冷启动”快得多，因为base类加载器已经可用并已填充。
        所以，当我们开启devtools后，classpath中的文件变化会导致应用自动重启

        其他进一步的依赖暂略. 下面都有对应的说明. 具体可见pom,有详细的注释.

4.tested.

    1>.已创建helloworld测试类:
        com/michael/springBoot/controller/HelloWorldController.java

    2>.开启helloworld服务:
        启用内置的tomcat启动服务,默认map路径是:/ , 默认端口是8080,具体见console日志.
        (端口号可通过application.yml配置文件中的server--port节点配置)
        开启方式:
        打开com/michael/springBoot/Application.java, 右键--Run "Application"即可.

    3>.测试helloworld服务:
        浏览器访问: http://localhost:8080/hello
        已通过测试.

    4>.自定义拦截器:
        com/michael/springBoot/filters/TestFilter.java
        配置该拦截器(不用再在web.xml中配置了):
            com/michael/springBoot/WebConfiguration.java:24
            com/michael/springBoot/WebConfiguration.java:35
        已通过测试.

    5>.从propertes中加载配置数据:
        application.properties
        com/michael/springBoot/tools/TestProperties.java
        已通过测试.

    6>.配置log:
        application.properties
        com/michael/springBoot/tools/TestProperties.java
        已通过测试.

    7>.整合持久层mybatis:
        依赖见pom.xml
        测试表见:src/db/user_t.sql
        application.yml
        com/michael/springBoot/domain/User.java
        com/michael/springBoot/dao/UserDao.java
        mapper/UserMapper.xml
        com/michael/springBoot/service/UserService.java
        com/michael/springBoot/service/impl/UserServiceImpl.java
        com/michael/springBoot/controller/HelloWorldController.java
        com/michael/springBoot/Application.java
        已通过测试.

    8>.整合mybatis代码生成器:
        依赖见pom.xml中的pluggin部分.(里面手动指定了该插件的配置文件的位置.即下行的内容.)
        配置见generator/generatorConfig.xml.
        执行方式: 双击: maven--Plugins--mybatis-generator-mybatis-generator:generate
        已通过测试. TSBaseUser的pojo,dao,mapper xml就是自动生成的.

    9>.事务管理:
        在Spring Boot中，当我们使用了spring-boot-starter-jdbc或spring-boot-starter-data-jpa依赖的时候,
        框架会自动默认分别注入DataSourceTransactionManager或JpaTransactionManager。
        所以我们不需要任何额外配置,就可以直接用@Transactional注解进行事务的使用。
        com.michael.springBoot.controller.HelloWorldController.testTransaction
        已通过测试.

    10>.整合jsp:
        pom
        application.properties
        com/michael/springBoot/controller/HelloWorldController.java
        注意: 有jsp时,项目启动方式要更换为用命令行启动: mvn spring-boot:run. 如果还沿用之前的main启动方式,会报错找不到jsp.
        已通过测试.

    11>.完善配置:
        把大多数配置都转移进spring推荐的yml文件: application.yml
        已通过测试.
        注意:
        经过亲测发现:还是建议把部分配置放入properties文件中,而不在application.yml中配置,
        是因为.yml那边的配置,经亲测,无法被其他xml文件导入.例如generatorConfig.xml中就无法导入.

    12>.使用通用mapper来构建基类Dao和基类Service.
        让所有子类dao和service都能自动具备基础的CRUD接口.
        并整合进mybatis代码生成器,自动生成dao的子接口,并继承所有通用接口的API.
        1).pom. 依赖和插件部分都需要引入.
        2).自定义基类dao:
            com.michael.springBoot.dao.BaseMapper
        3).代码生成器配置内容更新:
            generator/generatorConfig.xml
        4).基类Service:
            接口: com/michael/springBoot/service/BaseService.java
            实现: com/michael/springBoot/service/impl/BaseServiceImpl.java
        5).业务dao:
            com/michael/springBoot/dao/TSBaseUserMapper.java
        6).业务Service:
            接口: com/michael/springBoot/service/TSBaseUserService.java
            实现: com/michael/springBoot/service/TSBaseUserServiceImpl.java
        7).测试:
            com/michael/springBoot/controller/HelloWorldController.java
            继承自父类接口中的save,selectByKey,delete,updateNotNull都已测试.
            子类中自定义的方法getUserById已测.
            注意:
            使用了这种父类dao+父类Service的方式构建的项目后,必须让之前老的dao和service接口也实现两个父类接口.
            否则项目启动时会报错,提示找不到这部分dao或service接口.
            同时,如果实现了父类dao接口,要注意,父接口中已经定义过了的方法,
            在子类中不能再次定义了,否则报错已经有了该方法了.
        测试已通过.

    13>.整合shiro/
        0).shiro核心原理:
            shiro三大组件:
	        * Subject：当前用户，Subject 可以是一个人，但也可以是第三方服务、守护进程帐户、时钟守护任务或者其它--当前和软件交互的任何事件。
	        * SecurityManager：管理所有Subject，SecurityManager 是 Shiro 架构的核心，配合内部安全组件共同组成安全伞。
	        * Realms：用于进行权限信息的验证，我们自己实现。Realm 本质上是一个特定的安全 DAO：它封装与数据源连接的细节，得到Shiro 所需的相关的数据。在配置 Shiro 的时候，你必须指定至少一个Realm 来实现认证（authentication）和/或授权（authorization）。
            我们需要实现Realms的Authentication 和 Authorization。
            其中 :
            Authentication 是用来验证用户身份，
            Authorization 是授权访问控制，用于对用户进行的操作授权，证明该用户是否允许进行当前操作，如访问某个链接，某个资源文件等。
        1).生成5张权限核心表. 见/db/u_permission.sql
        2).用mybatis-generator生成了pojo+dao+mapper文件
        3).shiro核心的两个类:
            1.shiro配置类:com.michael.springBoot.ShiroConfiguration
                里面配置了:过滤器,安全管理器,自己扩展shiro写的realm.
                该类会在工程启动时执行,加上上述三种配置.
                注意,在过滤器链的配置中,配置的url都是controller资源的url,而不是直接的jsp路径.
            2.自己扩展shiro写的realm: com/michael/springBoot/tools/MyShiroRealm.java
                做了两项工作:
                1>.鉴权: 把当前登录用户的用户,角色集,权限集查出,放入shiro的SimpleAuthorizationInfo类中返回. 该重写方法会在每次前端页面解析到shiro的权限标签时都会执行一次! 除非做了匹配的缓存!
                2>.认证: 即登录认证.根据传入的username查DB,如果有该用户,则shiro会为我做好了密码比对.返回shiro的SimpleAuthenticationInfo类即可.
                         诸如密码不对等校验,都由shiro做好了,并返回对应的Exception. 只需要在controller中根据对应的Exception把不同的信息放入request域中返回给jsp显示即可.
            3.关于缓存:
                这两个方法应该在上层类AuthorizingRealm中加了缓存逻辑.但实际中还是在每次被调用.经测试:
                只有在下面的环节整合了ehcache后,在上层类AuthorizingRealm中的getAuthorizationInfo方法中的this.getAvailableAuthorizationCache()方法才会返回缓存. 否则返回null,即缓存无法使用.
                见下面额8)ehcache整合部分.

        4).其他自定义类:
            1.com/michael/springBoot/controller/ShiroController.java  测试shiro的Controller. 内含六个handler.
            2.五张表对应的domain,dao,mapper文件. 例如domain为: User/UserRole/Role/RolePermission/Permission.
            3.
        5).jsp:
            WEB-INF/jsp/403.jsp   没权限跳转页
            WEB-INF/jsp/login.jsp  登录页
            WEB-INF/jsp/user.jsp  用户列表页 --重点,内含大量shiro常用的标签.
            WEB-INF/jsp/user_edit.jsp 编辑用户页
        6).逻辑:
            1.系统加载时,执行shiro的配置类:ShiroConfiguration
            2.访问任意资源时,由shiro自动拦截和鉴权.如果没权限,返回到登录页.(在上面的配置类中配置的登录页jsp)
            3.在登录时,通过controller中的currentUser.login(token),来调用自定义realm: MyShiroRealm的认证方法:doGetAuthenticationInfo,如果该方法返回Null,则鉴权不通过.
                该方法只在登录时调用.
            4.在jsp页中解析到shiro权限标签时,会调用自定义realm: MyShiroRealm的鉴权方法:doGetAuthorizationInfo,如果该方法返回Null,则鉴权不通过.
                如果不在这里加缓存,则页面上每解析到一个shiro标签时,都会调用该方法一次! 注意该方法内会访问DB!
        7).ehcache整合:
            pom
            com.michael.springBoot.ShiroConfiguration.getEhCacheManager  配置一个缓存bean.
            ehcache-shiro.xml   缓存参数配置
            com.michael.springBoot.ShiroConfiguration.securityManager   把缓存加入自定义的realm中,realm上层类中的获取缓存的代码逻辑才会生效.
        8).已实现功能/待实现功能:
            1>.已实现:
                1.可以通过shiro进行jsp页面的"局部元素的控制".
                    相当于jeecg的<hasPermission>标签的功能.
                    由各个shiro内置的标签配合realm实现.见user.jsp中的各个标签.
                2.可以通过shiro进行jsp整个页面的可见/不可见控制.
                    由shiro配置类中的过滤器链的参数:perms 或 roles 来控制.
            2>.待实现:
                1. shiro+redis集成，避免每次访问有权限的链接都会去执行MyShiroRealm.doGetAuthenticationInfo()方法来查询当前用户的权限，因为实际情况中权限是不会经常变得，这样就可以使用redis进行权限的缓存。
                2. 实现shiro链接权限的动态加载，之前要添加一个链接的权限，要在shiro的配置文件中添加filterChainDefinitionMap.put("/add", "roles[100002]，perms[权限添加]")，这样很不方便管理，一种方法是将链接的权限使用数据库进行加载，另一种是通过init配置文件的方式读取。
                3. Shiro 自定义权限校验Filter定义，及功能实现。
                4. Shiro Ajax请求权限不满足，拦截后解决方案。这里有一个前提，我们知道Ajax不能做页面redirect和forward跳转，所以Ajax请求假如没登录，那么这个请求给用户的感觉就是没有任何反应，而用户又不知道用户已经退出了。
                5. Shiro JSP标签使用。
                6. Shiro 登录后跳转到最后一个访问的页面
                7. 在线显示，在线用户管理（踢出登录）。
                8. 登录注册密码加密传输。
                9. 集成验证码。
                10. 记住我的功能。关闭浏览器后还是登录状态。
        8).已测spring定时任务.
            配置: com.michael.springBoot.Application
            任务: com/michael/springBoot/scheduler/SchedulerTask1.java

5.整合springCloud
    1>.pom

    2>.配置文件:
        com/michael/springBoot/Application.java
        src/doc/nodeBackUp/node4/application.properties

    3>.说明:
       由于测试springCloud需要多个节点. 把本项目作为第一节点,peer1,即服务注册中心.
            其他节点项目的主要配置文件已备份至/doc/nodeBackUp/中了,除了这些文件外,所有节点的其他文件基本相同.

    4>.搭建:注册中心单点,成功.
            可以访问浏览器控制台.
            20180726 success again.

    5>.搭建:注册中心集群双点,成功.
        可以在浏览器控制台中看到对方available.
        对应笔记:springcloud(二)：注册中心Eureka
        第二节点工程:springBoot-peer2
        20180726 success again.

    6>.搭建:注册中心,服务提供者,服务注册者,成功.
        可以通过服务提供者和服务注册者分别访问到服务提供者所提供的服务.
        对应笔记:springcloud(三)：服务提供与调用
        =======================
        注册中心: 本工程.(注册中心并非服务的提供者!)
        服务提供者: springBoot-node3-serviceProvider工程. 配置文件已备份到/doc/nodeBackUp中.
        服务消费者: springBoot-node4-serviceConsumer工程. 注意新的概念: "feign"接口!
        =======================
        测试url:localhost:8084/testCallRemoteService.do?name=jsflzhong

    7>.搭建:注册中心对服务提供者多个点的负载均衡, 成功.
        这个功能应该是eureka自己实现的,猜测:我们只要保证第二个点的配置文件中的spring.application.name=的值,与第一个点一致,
        那么eureka注册中心就会把他俩视为同一个服务提供者,就会提供负载均衡服务.
        工程: springBoot-node3-serviceProvider-node2
        测试url: 反复刷新: localhost:8084/testCallRemoteService.do?name=jsflzhong

    8>.搭建:hystrix熔断器,成功.
        Feign Hystrix : 在服务提供者提供的服务不可用时,消费者会通过调用自己的实现类中的重写方法,来通知服务消费者指定的错误信息.
        工程: springBoot-node5-serviceConsumer2-hystrix
        测试url: http://localhost:8085/testCallRemoteService.do?name=jsflzhong
        在服务提供者启动并注册后,访问上述消费者的url来请求数据; 然后关闭该服务提供者,再次访问上述url,此时hystrix熔断器发挥回调作用.可看到自定义的熔断器返回的错误信息.








5.待解决BUG:

    1>.通过Application.java方式启动的项目,很快,但无法通过controller访问 jsp 页面.
        --已解决: 20180330
        由于IDEA的BUG,需要注掉tomcat-embed-jasper依赖的provided作用域.
        且,这种启动方式比下面maven的好处多很多,例如,LOG完善,断点支持.

    2>.通过maven命令行启动的项目,启动很慢,可以通过controller访问jsp页面,但无法点击停止按钮来真正停止JVM并释放端口.
        --已解决: 见笔记: 36.亲测maven+debug功能
        --新问题: 该模式下,控制台无法显示log.






